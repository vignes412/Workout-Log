import React from 'react';
import { WorkoutLogEntry } from '@/types/Workout_Log';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { parseISO, isValid, format, subDays, isWithinInterval } from 'date-fns';
import {
  LineChart,
  BarChart,
  RadarChart,
  ResponsiveContainer,
  CartesianGrid, XAxis, YAxis, Line, Bar,
  PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar,
  Tooltip, Legend
} from 'recharts';

// CSS Variables for chart theming
const CHART_COLORS = {
  volume: "#3b82f6",
  fatigue: "#ef4444",
  distribution: "#10b981",
  relativeVolume: "#8b5cf6", 
  recentFatigue: "#f97316",
  progression: "#3b82f6",
};

// Chart type definitions
type ChartConfig = {
  [key: string]: { 
    label: string;
    color: string;
  }
};

interface ChartComponentProps {
  logs: WorkoutLogEntry[];
}

// --- Data Processing Functions ---

const processVolumeOverTimeData = (logs: WorkoutLogEntry[]) => {
  if (!logs || logs.length === 0) return [];
  const dailyVolume: { [date: string]: number } = {};

  logs.forEach(log => {
    const parsedDate = parseISO(log.date);
    if (!isValid(parsedDate)) return;
    const date = format(parsedDate, 'yyyy-MM-dd');
    const volume = (log.weight || 0) * (log.reps || 0);
    dailyVolume[date] = (dailyVolume[date] || 0) + volume;
  });

  return Object.entries(dailyVolume)
    .map(([date, totalVolume]) => ({ date, totalVolume }))
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
};

const processVolumeByMuscleGroupData = (logs: WorkoutLogEntry[]) => {
  if (!logs || logs.length === 0) return [];
  const muscleGroupVolume: { [muscleGroup: string]: number } = {};

  logs.forEach(log => {
    const group = log.muscleGroup || 'Unknown';
    const volume = (log.weight || 0) * (log.reps || 0);
    muscleGroupVolume[group] = (muscleGroupVolume[group] || 0) + volume;
  });

  return Object.entries(muscleGroupVolume)
    .map(([muscleGroup, totalVolume]) => ({ muscleGroup, totalVolume }))
    .sort((a, b) => b.totalVolume - a.totalVolume);
};

const processMuscleGroupVolumeDistributionData = (logs: WorkoutLogEntry[]) => {
  if (!logs || logs.length === 0) return [];
  const muscleGroupVolume: { [muscleGroup: string]: number } = {};
  let totalVolumeOverall = 0;

  logs.forEach(log => {
    const group = log.muscleGroup || 'Unknown';
    const volume = (log.weight || 0) * (log.reps || 0);
    muscleGroupVolume[group] = (muscleGroupVolume[group] || 0) + volume;
    totalVolumeOverall += volume;
  });

  if (totalVolumeOverall === 0) {
    return Object.keys(muscleGroupVolume).map(group => ({
      subject: group,
      value: 0,
      fullMark: 100,
    }));
  }

  return Object.entries(muscleGroupVolume)
    .map(([muscleGroup, volume]) => ({
      subject: muscleGroup,
      value: parseFloat(((volume / totalVolumeOverall) * 100).toFixed(2)),
      fullMark: 100,
    }))
    .sort((a, b) => b.value - a.value);
};

const processRelativeDailyVolumeData = (logs: WorkoutLogEntry[]) => {
  if (!logs || logs.length === 0) return [];
  const dailyVolumeMap: { [date: string]: number } = {};

  logs.forEach(log => {
    const parsedDate = parseISO(log.date);
    if (!isValid(parsedDate)) return;
    const date = format(parsedDate, 'yyyy-MM-dd');
    const volume = (log.weight || 0) * (log.reps || 0);
    dailyVolumeMap[date] = (dailyVolumeMap[date] || 0) + volume;
  });

  const dailyVolumes = Object.entries(dailyVolumeMap).map(([date, totalVolume]) => ({ date, totalVolume }));
  if (dailyVolumes.length === 0) return [];

  const maxVolume = Math.max(...dailyVolumes.map(dv => dv.totalVolume), 0);

  if (maxVolume === 0) {
    return dailyVolumes.map(dv => ({ ...dv, relativeVolume: 0 }))
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  }

  return dailyVolumes
    .map(({ date, totalVolume }) => ({
      date,
      relativeVolume: parseFloat(((totalVolume / maxVolume) * 100).toFixed(2)),
    }))
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
};

const processRecentFatigueByMuscleGroupData = (logs: WorkoutLogEntry[], daysAgo: number = 7) => {
  if (!logs || logs.length === 0) return [];

  const overallDailyVolumeMap: { [date: string]: number } = {};
  logs.forEach(log => {
    const parsedDate = parseISO(log.date);
    if (!isValid(parsedDate)) return;
    const date = format(parsedDate, 'yyyy-MM-dd');
    const volume = (log.weight || 0) * (log.reps || 0);
    overallDailyVolumeMap[date] = (overallDailyVolumeMap[date] || 0) + volume;
  });
  const maxOverallDailyVolume = Math.max(...Object.values(overallDailyVolumeMap), 0);

  if (maxOverallDailyVolume === 0) {
     const muscleGroups = [...new Set(logs.map(log => log.muscleGroup || 'Unknown'))];
     return muscleGroups.map(group => ({ muscleGroup: group, fatiguePercent: 0 }));
  }

  const endDate = new Date();
  const startDate = subDays(endDate, daysAgo);

  const recentLogs = logs.filter(log => {
    const parsedDate = parseISO(log.date);
    return isValid(parsedDate) && isWithinInterval(parsedDate, { start: startDate, end: endDate });
  });

  const muscleGroupRecentVolume: { [muscleGroup: string]: number } = {};
  recentLogs.forEach(log => {
    const group = log.muscleGroup || 'Unknown';
    const volume = (log.weight || 0) * (log.reps || 0);
    muscleGroupRecentVolume[group] = (muscleGroupRecentVolume[group] || 0) + volume;
  });

  const muscleGroups = [...new Set(logs.map(log => log.muscleGroup || 'Unknown'))];

  return muscleGroups
    .map(group => {
      const recentVolume = muscleGroupRecentVolume[group] || 0;
      const fatiguePercent = parseFloat(((recentVolume / maxOverallDailyVolume) * 100).toFixed(2));
      return {
        muscleGroup: group,
        fatiguePercent: Math.min(fatiguePercent, 200),
      };
    })
    .sort((a, b) => b.fatiguePercent - a.fatiguePercent);
};

const processProgressionAndFatigueData = (logs: WorkoutLogEntry[]) => {
  if (!logs || logs.length === 0) return [];

  const dailyVolumeMap: { [date: string]: number } = {};
  logs.forEach(log => {
    const parsedDate = parseISO(log.date);
    if (!isValid(parsedDate)) return;
    const date = format(parsedDate, 'yyyy-MM-dd');
    const volume = (log.weight || 0) * (log.reps || 0);
    dailyVolumeMap[date] = (dailyVolumeMap[date] || 0) + volume;
  });

  const sortedDailyVolumes = Object.entries(dailyVolumeMap)
    .map(([date, totalVolume]) => ({ date, totalVolume }))
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

  if (sortedDailyVolumes.length === 0) return [];

  const maxOverallDailyVolume = Math.max(...sortedDailyVolumes.map(dv => dv.totalVolume), 0);

  return sortedDailyVolumes.map((currentDay, index) => {
    const fatiguePercent = maxOverallDailyVolume > 0
      ? parseFloat(((currentDay.totalVolume / maxOverallDailyVolume) * 100).toFixed(2))
      : 0;

    let progressionPercent = 0;
    if (index > 0) {
      const previousDay = sortedDailyVolumes[index - 1];
      if (previousDay.totalVolume > 0) {
        progressionPercent = parseFloat((((currentDay.totalVolume - previousDay.totalVolume) / previousDay.totalVolume) * 100).toFixed(2));
      } else if (currentDay.totalVolume > 0) {
        progressionPercent = 100; 
      }
    } else if (sortedDailyVolumes.length === 1 && currentDay.totalVolume > 0) {
      progressionPercent = 0;
    }
    return {
      date: currentDay.date,
      fatigue: fatiguePercent,
      progression: progressionPercent,
    };
  });
};

// --- Chart Components ---

const volumeOverTimeChartConfig = {
  totalVolume: {
    label: "Total Volume",
    color: "hsl(var(--chart-1))",
  },
} satisfies ChartConfig;

const VolumeOverTimeLineChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processVolumeOverTimeData(logs);
  if (data.length === 0) {
    return (
      <Card className="shadow-md hover:shadow-lg transition-shadow">
        <CardHeader><CardTitle>Total Volume Over Time</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see volume progression.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card className="shadow-md hover:shadow-lg transition-shadow">
      <CardHeader><CardTitle>Total Volume Over Time</CardTitle><CardDescription>Total volume (Weight Ã— Reps) lifted per day.</CardDescription></CardHeader>
      <CardContent>
        <div className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsLineChart 
              data={data} 
              margin={{ left: 0, right: 10, top: 10, bottom: 5 }}
              animationDuration={800}
              animationEasing="ease-in-out"
            >
              <defs>
                <linearGradient id="colorTotalVolume" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="var(--color-totalVolume)" stopOpacity={0.3} />
                  <stop offset="95%" stopColor="var(--color-totalVolume)" stopOpacity={0} />
                </linearGradient>
              </defs>
              <CartesianGrid vertical={false} strokeDasharray="3 3" strokeOpacity={0.15} />
              <XAxis 
                dataKey="date" 
                tickFormatter={(str) => format(new Date(str), 'MMM d')} 
                tickLine={false} 
                axisLine={false} 
                dy={5}
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                tickLine={false} 
                axisLine={false} 
                dx={-5} 
                tickFormatter={(value) => value > 1000 ? `${(value / 1000).toFixed(1)}k` : `${value}`}
                tick={{ fontSize: 12 }}
              />
              <ChartTooltip
                cursor={{ strokeDasharray: '3 3', strokeOpacity: 0.7 }}
                content={
                  <ChartTooltipContent 
                    className="rounded-md shadow-lg" 
                    formatter={(value) => `${typeof value === 'number' ? value.toLocaleString() : value} kg`} 
                  />
                }
              />
              <ChartLegend content={<ChartLegendContent />} />
              <Line 
                type="monotone" 
                dataKey="totalVolume"                stroke="var(--color-totalVolume)" 
                strokeWidth={2.5} 
                dot={false}
                activeDot={{ r: 6, strokeWidth: 1 }}
                isAnimationActive={true}
                fill="url(#colorTotalVolume)"
              />
            </RechartsLineChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
};

const volumeByMuscleGroupChartConfig = {
  totalVolume: {
    label: "Total Volume",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig;

const VolumeByMuscleGroupBarChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processVolumeByMuscleGroupData(logs);
  if (data.length === 0) {
    return (
      <Card>
        <CardHeader><CardTitle>Volume by Muscle Group</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see volume distribution.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader><CardTitle>Total Volume by Muscle Group</CardTitle><CardDescription>Total volume lifted per muscle group (all time).</CardDescription></CardHeader>
      <CardContent>
        <ChartContainer config={volumeByMuscleGroupChartConfig} className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsBarChart data={data} layout="vertical" margin={{ left: 20, right: 10, top: 5, bottom: 5 }}>
              <CartesianGrid horizontal={false} strokeDasharray="3 3" />
              <XAxis type="number" tickLine={false} axisLine={false} tickFormatter={(value) => value > 1000 ? `${(value / 1000).toFixed(1)}k` : `${value}`}/>
              <YAxis dataKey="muscleGroup" type="category" width={100} interval={0} tickLine={false} axisLine={false} dx={-5} />
              <ChartTooltip
                cursor={true}
                content={<ChartTooltipContent formatter={(value) => `${typeof value === 'number' ? value.toLocaleString() : value} kg`} />}
              />
              <ChartLegend content={<ChartLegendContent />} />
              <Bar dataKey="totalVolume" fill="var(--color-totalVolume)" radius={[0, 4, 4, 0]} />
            </RechartsBarChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
};

const muscleGroupVolumeDistributionChartConfig = {
  value: {
    label: "Volume Distribution",
    color: "hsl(var(--chart-3))",
  },
} satisfies ChartConfig;

const MuscleGroupVolumeDistributionRadarChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processMuscleGroupVolumeDistributionData(logs);
  if (data.length === 0) {
    return (
      <Card>
        <CardHeader><CardTitle>Muscle Group Volume Distribution</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see volume distribution.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader><CardTitle>Muscle Group Volume Distribution</CardTitle><CardDescription>Percentage of total volume per muscle group (all time).</CardDescription></CardHeader>
      <CardContent>
        <ChartContainer config={muscleGroupVolumeDistributionChartConfig} className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsRadarChart data={data}>
              <PolarGrid />
              <PolarAngleAxis dataKey="subject" tickLine={false} axisLine={false} />
              <PolarRadiusAxis angle={30} domain={[0, 100]} tickLine={false} axisLine={false} />
              <ChartTooltip cursor={false} content={<ChartTooltipContent formatter={(value) => `${value}%`} />} />
              <ChartLegend content={<ChartLegendContent />} />
              <Radar dataKey="value" fill="var(--color-value)" fillOpacity={0.6} stroke="var(--color-value)" />
            </RechartsRadarChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
};

const relativeDailyVolumeChartConfig = {
  relativeVolume: {
    label: "Relative Daily Volume",
    color: "hsl(var(--chart-4))",
  },
} satisfies ChartConfig;

const RelativeDailyVolumeLineChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processRelativeDailyVolumeData(logs);
  if (data.length === 0) {
    return (
      <Card>
        <CardHeader><CardTitle>Relative Daily Volume</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see daily volume trends.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader><CardTitle>Relative Daily Volume (Fatigue Proxy)</CardTitle><CardDescription>Daily volume as a percentage of your max recorded daily volume.</CardDescription></CardHeader>
      <CardContent>
        <ChartContainer config={relativeDailyVolumeChartConfig} className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsLineChart data={data} margin={{ left: 0, right: 10, top: 5, bottom: 5 }}>
              <CartesianGrid vertical={false} strokeDasharray="3 3" />
              <XAxis dataKey="date" tickFormatter={(str) => format(new Date(str), 'MMM d')} tickLine={false} axisLine={false} dy={5}/>
              <YAxis domain={[0, 100]} unit="%" tickLine={false} axisLine={false} dx={-5}/>
              <ChartTooltip cursor={true} content={<ChartTooltipContent formatter={(value) => `${value}%`} />} />
              <ChartLegend content={<ChartLegendContent />} />
              <Line type="monotone" dataKey="relativeVolume" stroke="var(--color-relativeVolume)" strokeWidth={2} dot={false} />
            </RechartsLineChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
};

const recentFatigueByMuscleGroupChartConfig = {
  fatiguePercent: {
    label: "Recent Fatigue",
    color: "hsl(var(--chart-5))",
  },
} satisfies ChartConfig;

const RecentFatigueByMuscleGroupBarChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processRecentFatigueByMuscleGroupData(logs, 7);
  if (data.length === 0) {
    return (
      <Card>
        <CardHeader><CardTitle>Recent Fatigue By Muscle Group</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see recent fatigue by muscle group.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader><CardTitle>Recent Fatigue By Muscle Group (Last 7 Days)</CardTitle><CardDescription>Recent volume for muscle group as % of your peak single-day total volume.</CardDescription></CardHeader>
      <CardContent>
        <ChartContainer config={recentFatigueByMuscleGroupChartConfig} className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <RechartsBarChart data={data} layout="vertical" margin={{ left: 20, right: 10, top: 5, bottom: 5 }}>
              <CartesianGrid horizontal={false} strokeDasharray="3 3" />
              <XAxis type="number" domain={[0, 'dataMax + 10']} unit="%" tickLine={false} axisLine={false} />
              <YAxis dataKey="muscleGroup" type="category" width={120} interval={0} tickLine={false} axisLine={false} dx={-5}/>
              <ChartTooltip cursor={true} content={<ChartTooltipContent formatter={(value) => `${typeof value === 'number' ? value.toFixed(2) : value}%`} />} />
              <ChartLegend content={<ChartLegendContent />} />
              <Bar dataKey="fatiguePercent" fill="var(--color-fatiguePercent)" radius={[0, 4, 4, 0]} />
            </RechartsBarChart>
          </ResponsiveContainer>
        </ChartContainer>
      </CardContent>
    </Card>
  );
};

const progressionAndFatigueChartConfig = {
  progression: {
    label: "Progression (% Change)",
    color: "hsl(var(--chart-1))",
  },
  fatigue: {
    label: "Fatigue (% Max Volume)",
    color: "hsl(var(--chart-2))",
  },
} satisfies ChartConfig;

const ProgressionAndFatigueLineChart: React.FC<ChartComponentProps> = ({ logs }) => {
  const data = processProgressionAndFatigueData(logs);
  if (!data || data.length === 0) {
    return (
      <Card>
        <CardHeader><CardTitle>Progression & Fatigue Over Time</CardTitle><CardDescription>No data available.</CardDescription></CardHeader>
        <CardContent className="h-[300px] flex items-center justify-center"><p>Log workouts to see progression and fatigue trends.</p></CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader><CardTitle>Progression & Fatigue Over Time</CardTitle><CardDescription>Daily progression rate and fatigue levels.</CardDescription></CardHeader>
      <CardContent>
        <div className="h-[300px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={data} margin={{ left: 0, right: 10, top: 5, bottom: 5 }}>
              <CartesianGrid vertical={false} strokeDasharray="3 3" />
              <XAxis dataKey="date" tickFormatter={(str) => format(new Date(str), 'MMM d')} tickLine={false} axisLine={false} dy={5}/>
              <YAxis yAxisId="left" orientation="left" unit="%" tickLine={false} axisLine={false} dx={-5} stroke={CHART_COLORS.progression} />
              <YAxis yAxisId="right" orientation="right" unit="%" domain={[0, 100]} tickLine={false} axisLine={false} dx={-5} stroke={CHART_COLORS.fatigue}/>
              <Tooltip
                formatter={(value: number, name: string) => {
                  if (name === 'progression') {
                    return [`${value.toFixed(2)}% (Progression)`, name];
                  }
                  if (name === 'fatigue') {
                    return [`${value.toFixed(2)}% (Fatigue)`, name];
                  }
                  return [`${value.toFixed(2)}%`, name];
                }}
                contentStyle={{ 
                  backgroundColor: 'var(--background)',
                  borderColor: 'var(--border)',
                  borderRadius: '6px',
                  boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                }}
              />
              <Legend />              <Line yAxisId="left" type="monotone" dataKey="progression" name="Progression" strokeWidth={2} dot={false} stroke={CHART_COLORS.progression} />
              <Line yAxisId="right" type="monotone" dataKey="fatigue" name="Fatigue" strokeWidth={2} dot={false} stroke={CHART_COLORS.fatigue} />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};

// --- Main Export ---
interface WorkoutChartsProps {
  workoutLogs: WorkoutLogEntry[];
}

export const WorkoutCharts: React.FC<WorkoutChartsProps> = ({ workoutLogs }) => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6 bg-background text-foreground rounded-lg">
      <style>{`
        :root {
          --chart-1: 221 83% 53%;
          --chart-2: 0 84% 60%;
          --chart-3: 160 84% 39%;
          --chart-4: 270 76% 64%;
          --chart-5: 24 94% 55%;
        }
        
        .chart-card {
          transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
          background-color: hsl(var(--card));
          border-width: 1px;
          border-color: hsl(var(--border));
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          border-radius: var(--radius);
          overflow: hidden;
        }
        
        .chart-card:hover {
          transform: translateY(-2px);
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .recharts-tooltip-wrapper .recharts-default-tooltip {
          background-color: hsl(var(--popover)) !important;
          border-color: hsl(var(--border)) !important;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;
          border-radius: var(--radius);
          padding: 12px !important;
        }
        
        .recharts-tooltip-label {
          color: hsl(var(--foreground)) !important;
          margin-bottom: 4px !important;
          font-weight: 500 !important;
        }
        
        .recharts-tooltip-item {
          color: hsl(var(--foreground)) !important;
        }
        
        .recharts-cartesian-axis-tick-value {
          font-size: 12px;
          fill: hsl(var(--muted-foreground));
        }
        
        .recharts-legend-wrapper {
          padding: 0 !important;
        }
        
        .recharts-legend-item-text {
          color: hsl(var(--foreground)) !important;
        }
        
        .recharts-cartesian-grid line {
          opacity: 0.15;
        }
        
        .recharts-active-dot {
          r: 6;
          stroke-width: 2;
        }
      `}</style>
      
      <VolumeOverTimeLineChart logs={workoutLogs} />
      <RelativeDailyVolumeLineChart logs={workoutLogs} />
      <ProgressionAndFatigueLineChart logs={workoutLogs} />
      <MuscleGroupVolumeDistributionRadarChart logs={workoutLogs} />
      <VolumeByMuscleGroupBarChart logs={workoutLogs} />
      <RecentFatigueByMuscleGroupBarChart logs={workoutLogs} />
    </div>
  );
};

export default WorkoutCharts;
